name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "docs/**"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        working-directory: libraries/js
        run: npm ci

      - name: Run tests
        working-directory: libraries/js
        run: npm test

      - name: Run linter
        working-directory: libraries/js
        run: npm run lint

      - name: Check formatting
        working-directory: libraries/js
        run: npm run format:check

      - name: Determine version bump
        id: version
        working-directory: libraries/js
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 --match "js-v*" 2>/dev/null || echo "js-v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Get commits since last tag (or all commits if no previous tag)
          if [ "$LAST_TAG" = "js-v0.0.0" ]; then
            COMMITS=$(git log --oneline -- .)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline -- .)
          fi

          # Parse commits for version bump
          if echo "$COMMITS" | grep -qiE "^[0-9a-f]+ FEATURE"; then
            # FEATURE commits trigger minor version bump
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -qiE "^[0-9a-f]+ FIX"; then
            # FIX commits trigger patch version bump
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            # REFACTOR or other commits don't trigger a release
            echo "bump=none" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        id: new_version
        if: steps.version.outputs.bump != 'none'
        working-directory: libraries/js
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 --match "js-v*" 2>/dev/null || echo "js-v0.0.0")
          VERSION=${LAST_TAG#js-v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          if [ "${{ steps.version.outputs.bump }}" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "${{ steps.version.outputs.bump }}" = "patch" ]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=js-v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

          # Update package.json version
          npm version $NEW_VERSION --no-git-tag-version

      - name: Build package
        if: steps.version.outputs.bump != 'none'
        working-directory: libraries/js
        run: npm run build

      - name: Publish to npm
        if: steps.version.outputs.bump != 'none'
        working-directory: libraries/js
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit version bump
        if: steps.version.outputs.bump != 'none'
        working-directory: libraries/js
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore(release): bump version to ${{ steps.new_version.outputs.version }}"
          git push

      - name: Create GitHub Release
        if: steps.version.outputs.bump != 'none'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.tag }}
          release_name: LogBull JS ${{ steps.new_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## LogBull JavaScript/TypeScript Library Release

            Version: ${{ steps.new_version.outputs.version }}

            ### Installation

            ```bash
            npm install logbull@${{ steps.new_version.outputs.version }}
            ```

            ### Changes

            See commit history for details.
